#!/usr/bin/perl
# -*-perl-*-    vi: set ts=4 sw=4 :
#
#  Copyright (C) 2006-2007, vitki.net. All rights reserved.
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#  $Date$
#  $Revision$
#  $Source$
#
#  Dynamic log display.
#

use strict;
use FindBin qw[$Bin];
use Cwd 'abs_path';
BEGIN { $ENV{OPTIKUS_HOME} = abs_path("$Bin/..") unless $ENV{OPTIKUS_HOME}; }
use lib "$ENV{OPTIKUS_HOME}/lib/perl5/site_perl";

no strict 'refs';
use utf8;

use FileHandle;
use Gtk2;
use Optikus::Log ':all';
use Optikus::Forms::Util;

use constant TEXT_FONT => "Courier New Bold 13";
use constant MAX_CHUNK => 100000;
use constant PERIOD    => 100;

my $win;

pforms_gtk_init("Optikus Log Viewer");
create_window(
              "$root_dir/var/log/remote.log",
              "$root_dir/var/log/pforms.log",
              "$root_dir/var/log/ohub.log"
             );
Gtk2->main;

sub put_text
{
  my ($text, $tview, $chunk) = @_;
  my $end = $text->get_end_iter;
  $text->insert($end, $chunk);
  my $mark = $text->get_insert;
  my $cur = $text->get_iter_at_mark($mark);
  my $delta = $cur->get_offset - $end->get_offset;
  $delta *= -1 if $delta < 0;
  $tview->scroll_to_mark($mark, 0.49, 0, 1.0, 1.0) if $delta < 2;
  Gtk2->main_iteration_do(1);
}

sub do_read
{
  my $pd = shift;
  my ($chunk, $len);
  sysread($pd->{handle}, $chunk, MAX_CHUNK);
  $len = length($chunk);
  if ($len > 0) {
    put_text($pd->{text}, $pd->{tview},
             $len < MAX_CHUNK ? $chunk : "+++++++++ SKIP +++++++++\n"
             );
    $pd->{fsize} += $len;
    $pd->{fsize} = -s $pd->{fname};
  } else {
    my $fsize = -s $pd->{fname};
    if ($fsize < $pd->{fsize}) {
      close($pd->{handle});
      open($pd->{handle}, $pd->{fname}) or print "cannot open $pd->{fname} !\n";
      $pd->{fsize} = -s $pd->{handle};
      put_text($pd->{text}, $pd->{tview},
               "\n========= REOPENED FILE ==========\n");
    }
  }
  return 1;
}

sub create_window
{
  my @files = @_;
  $win = Gtk2::Window->new("toplevel");
  $win->set_size_request(400, 200);
  $win->set_default_size(800, 400);
  $win->signal_connect(destroy => sub { Gtk2->main_quit; });
  my $frame = Gtk2::Frame->new;
  $frame->show;
  $frame->set_shadow_type('etched-in');
  $win->add($frame);
  my $note = Gtk2::Notebook->new;
  $frame->add($note);
  $note->set_tab_pos("top");
  for my $file(@files) {
    create_page($win, $note, $file);
  }
  $win->show_all;
  Optikus::Forms::Util::set_window_icon($win, "kpic/toggle_log.png");
}


sub create_page
{
  my ($win, $note, $fname) = @_;
  my ($vbox, $hbox, $button, $scroll, $frame, $text, $tview);
  $vbox = Gtk2::VBox->new(0, 5);
  my $title = $fname;
  $title =~ s/^.*\///;
  $title =~ s/\.log$//;
  $note->append_page($vbox, $title);

  $frame = Gtk2::Frame->new($title);
  $frame->show;
  $frame->set_shadow_type('etched-in');
  $vbox->pack_start($frame, 1, 1, 2);
  $vbox->pack_start(Gtk2::HSeparator->new, 0, 0, 1);
  $scroll = Gtk2::ScrolledWindow->new(undef, undef);
  $frame->add($scroll);
  $scroll->set_policy('automatic', 'automatic');
  $scroll->set_shadow_type('in');
  $text = Gtk2::TextBuffer->new(undef);
  $tview = Gtk2::TextView->new_with_buffer($text);
  $scroll->add($tview);
  $tview->modify_font(Gtk2::Pango::FontDescription->from_string(TEXT_FONT));
  $hbox = Gtk2::HBox->new(0, 5);
  $vbox->pack_end($hbox, 0, 1, 0);
  $hbox->pack_start(Gtk2::Label->new(""), 1, 1, 0);
  create_button($hbox, "kpic/editclear.png", "Clear",
                sub { $text->set_text(""); });
  create_button($hbox, "kpic/button_cancel.png", "Quit",
                sub { Gtk2->main_quit; });
  my $handle = "file_$fname";
  open($handle, $fname) or print "cannot open $fname !\n";
  my $pd = { fname => $fname, handle => $handle, fsize => ( -s $fname ),
             text => $text, tview => $tview };
  Glib::Timeout->add(PERIOD, sub { do_read($pd); });
}


sub create_button
{
  my ($hbox, $icon, $label, $func) = @_;
  my $button = Gtk2::Button->new;
  $hbox->pack_start($button, 0, 1, 2);
  my $bbox = Gtk2::HBox->new(0, 1);
  $bbox->pack_start(Gtk2::Label->new(" "), 1, 0, 1);
  $bbox->pack_start(create_image($icon), 0, 0, 1)
      if defined $icon;
  $bbox->pack_start(Gtk2::Label->new($label), 0, 0, 1)
      if defined $label;
  $bbox->pack_end(Gtk2::Label->new(" "), 1, 0, 1);
  $button->add($bbox);
  $button->signal_connect(clicked => $func) if defined $func;
  return $button;
}
