#!/usr/bin/perl
# -*-perl-*-    vi: set ts=4 sw=4 :
#
#  Copyright (C) 2006-2007, vitki.net. All rights reserved.
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#  $Date$
#  $Revision$
#  $Source$
#
#  Graphical wrapper around stream dumper.
#

use strict;
use FindBin qw[$Bin];
use Cwd 'abs_path';
BEGIN { $ENV{OPTIKUS_HOME} = abs_path("$Bin/..") unless $ENV{OPTIKUS_HOME}; }
use lib "$ENV{OPTIKUS_HOME}/lib/perl5/site_perl";

use utf8;

use FileHandle;
use IPC::Open2;
use Gtk2;
use Optikus::Forms::Util;
use Optikus::Log ':all';

use constant TEXT_FONT => "Courier New Bold 13";

my $program = "$ENV{OPTIKUS_HOME}/bin/sample-echo";

my ($win, $text, $tview, $pid, $echo_in);

pforms_gtk_init("Optikus Message Viewer");
create_window();
restart_echo();
Gtk2->main;

sub create_window
{
  my ($vbox, $hbox, $button, $scroll, $frame);
  $win = Gtk2::Window->new("toplevel");
  $win->set_size_request(500, 200);
  $win->set_default_size(800, 400);
  $vbox = Gtk2::VBox->new(0,5);
  $win->add($vbox);
  $win->signal_connect(destroy => sub { Gtk2->main_quit; });

  $frame = Gtk2::Frame->new("log");
  $frame->show;
  $frame->set_shadow_type('etched-in');
  $vbox->pack_start($frame, 1, 1, 2);
  $vbox->pack_start(Gtk2::HSeparator->new, 0, 0, 1);
  $scroll = Gtk2::ScrolledWindow->new(undef, undef);
  $frame->add($scroll);
  $scroll->set_policy('automatic', 'automatic');
  $scroll->set_shadow_type('in');
  $text = Gtk2::TextBuffer->new(undef);
  $tview = Gtk2::TextView->new_with_buffer($text);
  $scroll->add($tview);
  $tview->modify_font(Gtk2::Pango::FontDescription->from_string(TEXT_FONT));
  put_text("Starting...");

  $hbox = Gtk2::HBox->new(0, 5);
  $vbox->pack_end($hbox, 0, 1, 0);
  $hbox->pack_start(Gtk2::Label->new(""), 1, 1, 0);
  create_button($hbox, "kpic/editcopy.png", "Copy",
                sub { copy_to_clipboard(); });
  create_button($hbox, "kpic/editclear.png", "Clear",
                sub { $text->set_text(""); });
  create_button($hbox, "kpic/help.png", "Help",
                sub { print Writer "h\n"; });
  create_button($hbox, "kpic/button_cancel.png", "Quit",
                sub { Gtk2->main_quit; });
  $hbox = Gtk2::HBox->new(0, 5);
  $vbox->pack_end($hbox, 0, 1, 0);
  create_pair($hbox, "kpic/configure.png",
              "Command", "Send command", "");
  $win->show_all();
  Optikus::Forms::Util::set_window_icon($win, "tools/book.png");
}


sub gtk_wait
{
  my $t = shift;
  my $stime = time;
  while (time < $stime + $t) {
    Gtk2->main_iteration_do(1);
  } 
}


sub copy_to_clipboard
{
}


sub put_text
{
  my ($msg) = @_;
  my $end = $text->get_end_iter;
  $text->insert($end, "$msg\n");
  my $mark = $text->get_insert;
  my $cur = $text->get_iter_at_mark($mark);
  my $delta = $cur->get_offset - $end->get_offset;
  $delta *= -1 if $delta < 0;
  $tview->scroll_to_mark($mark, 0.49, 0, 1.0, 1.0)
      if $delta < 2;
}


sub put_cmd
{
  my ($msg, $cmd, $entry) = @_;
  my $s = $entry->get_text;
  $s =~ s/^\s+//;
  $s =~ s/\s+$//;
  return unless length($s);
  put_text("$msg : $s");
  print Writer "$cmd $s\n";
}


sub create_button
{
  my ($hbox, $icon, $label, $func) = @_;
  my $button = Gtk2::Button->new;
  $hbox->pack_start($button, 0, 1, 2);
  my $bbox = Gtk2::HBox->new(0, 1);
  $bbox->pack_start(Gtk2::Label->new(" "), 1, 0, 1);
  $bbox->pack_start(create_image($icon), 0, 0, 1)
      if defined $icon;
  $bbox->pack_start(Gtk2::Label->new($label), 0, 0, 1)
      if defined $label;
  $bbox->pack_end(Gtk2::Label->new(" "), 1, 0, 1);
  $button->add($bbox);
  $button->signal_connect(clicked => $func) if defined $func;
  return $button;
}


sub create_pair
{
  my ($hbox, $icon, $label, $msg, $cmd) = @_;
  my $button = create_button($hbox, $icon, $label);
  my $entry = Gtk2::Entry->new;
  $entry->set_size_request(40, 24);
  $hbox->pack_start($entry, 1, 1, 2);
  $button->signal_connect(clicked =>
                          sub { put_cmd($msg, $cmd, $entry); });
  $entry->signal_connect(activate =>
                         sub { put_cmd($msg, $cmd, $entry); });
  return $hbox;
}


sub restart_echo
{
  my $to = shift;
  $to = 1 if not defined $to;
  Glib::Source->remove($echo_in) if defined $echo_in;
  kill 15, $pid if defined $pid;
  undef $pid;
  gtk_wait($to);
  $pid = open2( \*Reader, \*Writer, $program) or return;
  Writer->autoflush();
  $echo_in = Glib::IO->add_watch(fileno(\*Reader), [qw(in)], \&do_read);
}


sub do_read
{
  my $got;
  sysread(Reader, $got, 16384) if defined \*Reader;
  return restart_echo(10) if defined $got and length $got == 0;
  return if length($got) == 0;
  for (split("\n", $got)) {
    s/^echo>//;
    s/^>*\d\d\:\d\d:\d\d(\.\d\d\d)?\secho:\s//;
    s/^ECHO:\s+//;
    next if /^\s*$/;
    if ( $_ =~ /^(.*?[A-Z_0-9]{3,}?)\s\s\s+(.*)$/ ) {
      $_ = sprintf("%-40s %s", $1, $2);
    }
    put_text ($_);
  }
  return 1;
}

END
{
  kill(9, $pid) if defined $pid;
}
